<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>openQ</title>
    <link href="" rel="self" />
    <link href="http://openq.cn/" />
    <updated>2015-10-13T10:17:00Z</updated>
    <id>http://openq.cn/</id>
    
    <entry>
        <title><![CDATA[jOOR源码设计简析]]></title>
        <author><name>山姆是个好蜀黍</name><uri>http://openq.cn/</uri></author>
        <link href="http://openq.cn/joor-source-code-analysis/"/>
        <updated>2015-10-13T10:17:00Z</updated>
        <published>2015-10-13T10:17:00Z</published>
        <id>http://openq.cn/joor-source-code-analysis/</id>
        <content type="html">
            <![CDATA[
             <p>大家都知道面向对象的一个基础工作就是将数据类型化，这在处理复杂的概念体系或者维护系统长期健康发展是非常必要的。但是在实际开发过程中，还有很多场景通过非设计模式（或者说非常见设计模式）的办法可以实现非常优雅而且灵活的代码。前几天看到一篇文章<strong><a href="http://www.imooc.com/article/1518">Java 反射最佳实践</a></strong>文章介绍了一个非常优雅的反射解决方案：<strong><a href="https://github.com/jOOQ/jOOR">jOOR</a></strong>   </p>

<p>Java中写反射竟然可以这么简单——  </p>

<pre><code>// All examples assume the following static import:  
import static org.joor.Reflect.*;  

String world = on(&quot;java.lang.String&quot;)  // Like Class.forName()  
                .create(&quot;Hello World&quot;) // Call most specific matching constructor  
                .call(&quot;substring&quot;, 6)  // Call most specific matching substring() method  
                .call(&quot;toString&quot;)      // Call toString()  
                .get();                // Get the wrapped object, in this case a String  

//Comparison  
Employee[] employees = on(department).call(&quot;getEmployees&quot;).get();  

for (Employee employee : employees) {  
  Street street = on(employee).call(&quot;getAddress&quot;).call(&quot;getStreet&quot;).get();  
  System.out.println(street);  
}</code></pre>

<p>这么漂亮的设计一定得读一下<a href="https://github.com/jOOQ/jOOR/blob/master/jOOR/src/main/java/org/joor/Reflect.java">源码</a>。<br/>
作者的实现代码同样漂亮，简单摘取一二：  </p>

<p>1、私有化构造器，从而强制用户使用静态on方法（是不是想到了单例）  </p>

<pre><code>// Constructors  
    private Reflect(Class&lt;?&gt; type) {  
        this.object = type;   
        this.isClass = true; //通过这个开关实现object与class的结构复用，除了on的复用还有类级别方法、实例级别方法的复用（见3）  
    }  

    private Reflect(Object object) {  
        this.object = object;  
        this.isClass = false;  
    }</code></pre>

<p>2、对外提供的接口就是这两个了，通过返回Reflect实例来实现链式调用（与单例不同的是这里每次都创建一个实例，所以从实际需求出发，就不存在多线程问题了）  </p>

<pre><code>public static Reflect on(String name) throws ReflectException {  
        return on(forName(name));  
    }  
    public static Reflect on(String name, ClassLoader classLoader) throws ReflectException {  
        return on(forName(name, classLoader));  
    }</code></pre>

<p>3、Reflect的实例方法同样都通过返回对象来实现链式风格调用。而具体实现中，每次链式调用返回的对象都是Reflect，响应级别的目标对象存储在Reflect.object中，这种『递归』式的复用设计让人拍案叫绝。  </p>

<pre><code>//创建一个目标对象的wapper，因为很多反射场景中你根本拿不到调用对象的类型（比如系统私有类）所以这么包装不只是为了链式调用，还有实际场景考虑——一箭双雕。  
    public Reflect create() throws ReflectException {  
        return create(new Object[0]);  
    }  
     //目标对象方法调用  
     //需要传参可以调用这个：call(String name, Object... args) throws ReflectException   
    public Reflect call(String name) throws ReflectException {  
        return call(name, new Object[0]);  
    }  

    //获得目标实例&lt;T&gt;  
    public &lt;T&gt; T get() {  
        return (T) object;  
    }  
    //获得目标对象的属性  
    public Reflect field(String name) throws ReflectException {  
        try {  
            Field field = field0(name);  
            return on(field.get(object));  
        }  
        catch (Exception e) {  
            throw new ReflectException(e);  
        }  
    }</code></pre>

<p>4、神奇的抽象代理机制：通过代理类就可以在拿不到目标类型的时候类型化调用了，这里展示一下调用demo吧，这个机制算是整体机制的补充，具体实现还请异步自己看源代码咯。  </p>

<pre><code>public interface StringProxy {  
  String substring(int beginIndex);  
}  

String substring = on(&quot;java.lang.String&quot;)  
                    .create(&quot;Hello World&quot;)  
                    .as(StringProxy.class) // Create a proxy for the wrapped object  
                    .substring(6);         // 【重点】Call a proxy method</code></pre>

<p>忽然想到其实其他语言里边也需要类似的机制，比如反射更加灵活的oc，哪天有时间可以尝试搞一搞。</p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[如何通过svn,git进行优雅的代码集成]]></title>
        <author><name>山姆是个好蜀黍</name><uri>http://openq.cn/</uri></author>
        <link href="http://openq.cn/svn-externals-git-submodule/"/>
        <updated>2014-09-12T12:30:00Z</updated>
        <published>2014-09-12T12:30:00Z</published>
        <id>http://openq.cn/svn-externals-git-submodule/</id>
        <content type="html">
            <![CDATA[
             <p>谈到代码集成，大部分人可能会想到各种的CI Server，比如CruiseControl、Hudson、Jenkins种种。这些持续集成的工具基本上都是将源码管理工具、构建工具、测试工具等集成起来通过统一的配置来实现多项目、松耦合、自动化、透明化的构建目标的。而深入到某个项目，人们通常是通过maven或一段shell脚本来管理代码间的复杂依赖关系及构建顺序的。很多场景下maven并不好用，比如构建iOS程序时。  </p>

<p>我们公司使用的Jenkins构建iOS、Android程序时会调用一大段Shell脚本，项目中如果存在代码依赖（比如其他部门开发的SDK），则通过约定目录层次，通过shell 按顺序执行SVN命令分配签出代码后执行构建命令——这么干很丑！一方面，团队成员在每个人的开发环境上都要进行很多约定的设置才能开始工作。另一方面，外部依赖代码的版本不好管理。因此，通过研究，我决定将这些外部代码通过 svn externals来实现。不但开发环境配置简单了，Jenkins构建的代码也精简了不少。同样，我对我的静态博客中皮肤的依赖也改成了git submodule的方式。——这种动态关联，让人感觉轻松不少。  </p>

<p>一、svn externals：  </p>
<div class="highlight"><pre><span class="nb">cd</span> /path/to/your/codedir  
svn pedit svn:externals .
</pre></div>

<p>在打开的窗口中填入要依赖的外部代码路径，形如  </p>
<div class="highlight"><pre>localDir -r0000 http://the/outer/svn/url
</pre></div>

<p>其中，localDir -&gt; 你的代码签出到当前路径后存放的目录名。-r0000 -&gt; 限定svn版本号，可不填则将签出最新代码。<br/>
可以输入多行，部署更多的外部依赖。  </p>

<p>:wq 保存后继续：  </p>
<div class="highlight"><pre>svn up  
svn ci -m <span class="s1">&#39;add externals&#39;</span>
</pre></div>

<p>再检查一下依赖是否已经都设置好，是否可以build通过，就可以通知其他人签出了。  </p>

<p>参考：<a href="http://defencew.blog.163.com/blog/static/5795194120118282336825/">svn externals 引入外部分支目录 </a> <a href="http://blog.csdn.net/echoisland/article/details/6584875">学会使用svn:externals</a>  </p>

<p>二、git submodule：  </p>

<p>以下是本博客代码如何引入主题的脚本：  </p>
<div class="highlight"><pre><span class="nb">cd</span> /path/to/your/blog  
mkdir themes  
mkdir themes/puresam  
git submodule add git@github.com:hl85/catsup-theme-puresam.git themes/puresam  
git add .  
git commit -m <span class="s2">&quot;Add submodule puresam&quot;</span>  
git submodule init  
git push
</pre></div>

<p>参考：<a href="http://www.josephj.com/entry.php?id=342">Git Submodule 的認識與正確使用！</a>  </p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[正则表达式匹配注释]]></title>
        <author><name>山姆是个好蜀黍</name><uri>http://openq.cn/</uri></author>
        <link href="http://openq.cn/regex4comments/"/>
        <updated>2014-09-04T12:00:00Z</updated>
        <published>2014-09-04T12:00:00Z</published>
        <id>http://openq.cn/regex4comments/</id>
        <content type="html">
            <![CDATA[
             <p>主要是针对以下几种注释<br/>
1、行注释：//<br/>
2、块注释：/**/<br/>
3、行注释：#  </p>

<pre><code>(?&lt;!:)\/\/.*|#.*|\/\*(.|\s)*?\*\/</code></pre>

<p>这个正则表达式由&quot;|&ldquo;分割成三部分：  </p>

<p>第一部分、  </p>

<pre><code>(?&lt;!:)\/\/.*</code></pre>

<p>用来匹配//单行注释，同时通过<strong><em>(?&lt;!:)</em></strong>反向否定了:与//衔接的情况，从而避免命中各种网络协议。<br/>
这里边涉及的反向否定预查实际上是正则的<strong><em>模式匹配</em></strong>的高级用法了，模式匹配总共有：(pattern)，(?:pattern)，(?=pattern)，(?!pattern)，(?&lt;=pattern)，(?&lt;!pattern)六种形式，可以参阅我在后边推荐的百度百科相关文章。  </p>

<p>第二部分、  </p>

<pre><code>#.*</code></pre>

<p>很简单用来匹配#号注释。  </p>

<p>第三部分、  </p>

<pre><code>\/\*(.|\s)*?\*\/</code></pre>

<p>用来匹配前后是斜杠星的块状注释，中间是文字或空白字符（空格、制表符、换页符等等）。<br/>
其中有一个符号值得注意一下：<strong><em>?</em></strong> 问号。问号和前边<em>组成 *? 代表</em><strong>非贪婪匹配</strong>*，如果只有*那就是贪婪匹配，就会出现两个注释块中间的正文也被匹配上去的情况。  </p>

<p>文中正则来源：<a href="http://www.cnblogs.com/xiziyin/archive/2012/01/25/2329350.html">传送门</a><br/>
关于正则非常棒的资料：<a href="http://baike.baidu.com/view/94238.htm?fr=aladdin">百度百科</a><br/>
贪婪与非贪婪模式：<a href="http://blog.csdn.net/lxcnn/article/details/4756030">传送门</a><br/>
好用的在线正则工具：<a href="http://www.正则r.com/v1/">传送门</a>  </p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[Mac系统下SVN工具推荐]]></title>
        <author><name>山姆是个好蜀黍</name><uri>http://openq.cn/</uri></author>
        <link href="http://openq.cn/svn-tools-for-mac/"/>
        <updated>2014-08-04T13:18:00Z</updated>
        <published>2014-08-04T13:18:00Z</published>
        <id>http://openq.cn/svn-tools-for-mac/</id>
        <content type="html">
            <![CDATA[
             <p>超级推荐：cornerstone（收费388￥，<a href="https://itunes.apple.com/cn/app/cornerstone/id404789253?mt=12">正版下载</a>，<a href="http://pan.baidu.com/s/1pJiCArp">破解版</a>）<br/>
其他：<br/>
svnx(开源，<a href="http://code.google.com/p/svnx/downloads/list">点击下载</a>)<br/>
smartsvn（收费，<a href="https://www.wandisco.com/store/smartsvn-professional">正版下载</a>，<a href="http://pan.baidu.com/s/1gd9XnsJ">keygen</a>）<br/>
versions（收费，<a href="http://www.versionsapp.com/">正版下载</a>，<a href="http://pan.baidu.com/s/1eQteteM">破解版</a>）  </p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[云引擎做不到]]></title>
        <author><name>山姆是个好蜀黍</name><uri>http://openq.cn/</uri></author>
        <link href="http://openq.cn/cloud-cant-do/"/>
        <updated>2014-08-01T22:55:00Z</updated>
        <published>2014-08-01T22:55:00Z</published>
        <id>http://openq.cn/cloud-cant-do/</id>
        <content type="html">
            <![CDATA[
             <p>这个题目有点大了，实际上是最近为完成将域名appfanr.com跳转（301）到openq.cn[任务参见:<a href="/hello-baby">Hello,Baby!</a>]各种折腾的心得——不过的确是各个云引擎都用过了，非常不好使，最后用FREEHOSTING.COM轻松解决了。  </p>

<p>其中我曾尝试过的云引擎有：阿里的ACE、百度的BAE、谷歌的GAE、亚马逊的EC2、红帽的openshift、京东的JAE。  </p>

<p>先不说使用感受，先说为什么一个小小的301，这些引擎都做不到，主要原因有二：1、国内的引擎需要域名备案，我的appfanr是在国外注册的，不好备。2、GAE、EC2、openshift无一例外都特么被墙了（EC2远程操作速度、流畅度爽的一塌糊涂——但是public dns换了一堆甚至于我都用goagent了，还是访问不到，可见我们的长城多么强大！）。云引擎具体情况就不表了，简单说一下个人感受，有兴趣可以细聊：  </p>

<p>1、BAE，是我最早用过的云引擎，强大，支持语言广泛，伸缩性好。不好的是现在开始强制收费了（原来的免费实例也悄悄的产生了账单，大爷的！），我没啥好项目暂时就不用了。<br/>
2、SAE，新浪的SAE出来的最早，但是我没用过，主要原因是没有免费试用的邀请，不过周围用SAE的基本都是写小插件玩玩而已,正式用的很少。<br/>
3、ACE，前段时间申请了一个免费空间，很有意思，我申请的理由就说“BAE开始收费了不爽所以转过来了”延后就给我（hao）通（ren）过（xing）了，ACE很稳定我周围创业的同学，服务基本都搭在了ACE。ACE在我看来有个问题，就是只支持两种语言，我最近热衷于python —— 不能玩 —— 也暂时先算了。不过如果我创业，也会用ACE，毕竟人家有成熟的万网团队，服务品质容易保证。<br/>
4、JAE，是我用过的最不稳定的云引擎，不稳定到你刚创建的实例一刷新（cao）就（dan）丢（a）了！！好的是他们采用的vmware的架构，灵活性强开放度高，不过SDK文档、Demo都不足，作为学习或玩玩可以（毕竟现在各种免费，各种开放），但是真的想做东西还是躲远点。<br/>
5、GAE、EC2、openshift一起说是因为这几个引擎都强大到我想哭，尤其是EC2，安装东西那个流畅啊，装啥都是一出溜就完啊，爽到自己立刻就像飞往敌国再也不回来了——可悲的是没人要——还是好好的在祖国接收（da）伟大的（ye）长城（de）吧。。。  </p>

<p>FREEHOSTING.COM的免费服务也很不错，空间1G，支持php、mysql等，有独立的域名服务器，所以我申请完之后只做了两件事：<br/>
1、在域名提供商那里设置将appfanr的Name Server变换过去。<br/>
2、在空间设置里填入301转向。<br/>
齐活儿！<br/>
现在大家可以访问一下<a href="http://appfanr.com"><a href="http://appfanr.com">http://appfanr.com</a></a>，另外也可以命令行查一下:<strong>whois appfanr.com</strong> 或者是 <strong>dig appfanr.com</strong>，服务、速度比以前见过的很多收费空间都不差！关键是，不被墙啊！  </p>

            ]]>
        </content>
    </entry>
    
</feed>